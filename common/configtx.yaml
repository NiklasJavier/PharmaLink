# Copyright IBM Corp. Alle Rechte vorbehalten.
#
# SPDX-License-Identifier: Apache-2.0
#

---
################################################################################
#
#   ORGANISATIONEN
#
#   Dieser Abschnitt definiert die organisationalen Identitäten, die in den
#   Konfigurationsprofilen referenziert werden können.
#
################################################################################
Organizations:

    # SampleOrg definiert einen MSP unter Verwendung der Beispielkonfiguration. Sie sollte niemals
    # in einer Produktionsumgebung verwendet werden, kann aber als Vorlage für andere Definitionen dienen.
    - &SampleOrg
        # Name ist der Schlüssel, über den auf diese Organisation in
        # Kanalkonfigurationstransaktionen verwiesen wird.
        # Name kann alphanumerische Zeichen sowie Punkte und Bindestriche enthalten.
        Name: SampleOrg

        # SkipAsForeign kann für Organisationsdefinitionen auf true gesetzt werden, die
        # während der Kanalerstellung vom Orderer-Systemkanal geerbt werden sollen. Dies
        # ist besonders nützlich, wenn ein Administrator einer einzelnen Organisation ohne Zugriff auf die
        # MSP-Verzeichnisse der anderen Organisationen einen Kanal erstellen möchte. Beachten Sie,
        # dass diese Eigenschaft für Organisationen, die an der Blockerstellung beteiligt sind, immer auf false gesetzt sein muss.
        SkipAsForeign: false

        # ID ist der Schlüssel, über den die MSP-Definition dieser Organisation referenziert wird.
        # ID kann alphanumerische Zeichen sowie Punkte und Bindestriche enthalten.
        ID: SampleOrg

        # MSPDir ist der Dateisystempfad, der die MSP-Konfiguration enthält.
        MSPDir: msp

        # Policies definiert die Richtlinien auf dieser Ebene des Konfigurationsbaums.
        # Für Organisationsrichtlinien lautet ihr kanonischer Pfad normalerweise
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: &SampleOrgPolicies
            Readers:
                Type: Signature
                Rule: "OR('SampleOrg.member')"
                # Wenn Ihr MSP mit den neuen NodeOUs konfiguriert ist, möchten Sie vielleicht
                # eine spezifischere Regel wie die folgende verwenden:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
            Writers:
                Type: Signature
                Rule: "OR('SampleOrg.member')"
                # Wenn Ihr MSP mit den neuen NodeOUs konfiguriert ist, möchten Sie vielleicht
                # eine spezifischere Regel wie die folgende verwenden:
                # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
            Admins:
                Type: Signature
                Rule: "OR('SampleOrg.admin')"
            Endorsement:
                Type: Signature
                Rule: "OR('SampleOrg.member')"

        # OrdererEndpoints ist eine Liste aller Orderer, die diese Organisation betreibt, mit denen sich Clients
        # und Peers verbinden können, um Transaktionen zu übermitteln bzw. Blöcke zu empfangen.
        OrdererEndpoints:
            - "127.0.0.1:7050"

        # AnchorPeers definiert den Standort von Peers, die für die
        # organisationsübergreifende Gossip-Kommunikation verwendet werden können.
        #
        # HINWEIS: Dieser Wert sollte nur bei Verwendung des veralteten
        # `configtxgen --outputAnchorPeersUpdate`-Befehls gesetzt werden. Es wird empfohlen,
        # stattdessen den Prozess zur Aktualisierung der Kanalkonfiguration zu verwenden, um die
        # Anchor-Peers für jede Organisation festzulegen.
        AnchorPeers:
            - Host: 127.0.0.1
              Port: 7051

################################################################################
#
#   FÄHIGKEITEN (CAPABILITIES)
#
#   Dieser Abschnitt definiert die Fähigkeiten des Fabric-Netzwerks. Dies ist ein neues
#   Konzept ab v1.1.0 und sollte nicht in gemischten Netzwerken mit
#   v1.0.x-Peers und -Orderern verwendet werden. Fähigkeiten definieren Funktionen, die
#   in einer Fabric-Binary vorhanden sein müssen, damit diese Binärdatei sicher am
#   Fabric-Netzwerk teilnehmen kann. Wenn beispielsweise ein neuer MSP-Typ hinzugefügt wird,
#   könnten neuere Binärdateien die Signaturen dieses Typs erkennen und validieren, während ältere
#   Binärdateien ohne diese Unterstützung diese Transaktionen nicht validieren könnten.
#   Dies könnte dazu führen, dass verschiedene Versionen der Fabric-Binärdateien
#   unterschiedliche World States haben. Stattdessen informiert die Definition einer Fähigkeit für einen Kanal
#   die Binärdateien ohne diese Fähigkeit, dass sie die Verarbeitung von Transaktionen einstellen müssen,
#   bis sie aktualisiert wurden. Bei v1.0.x wird der v1.0.x-Peer absichtlich abstürzen,
#   wenn irgendwelche Fähigkeiten definiert sind (einschließlich einer Map mit allen deaktivierten Fähigkeiten).
#
################################################################################
Capabilities:
    # Channel-Fähigkeiten gelten sowohl für die Orderer als auch für die Peers und müssen
    # von beiden unterstützt werden.
    # Setzen Sie den Wert der Fähigkeit auf true, um sie vorauszusetzen.
    Channel: &ChannelCapabilities
        # V2.0 für Channel ist ein Sammel-Flag für Verhalten, das für alle Orderer und Peers,
        # die auf dem v2.0.0-Niveau laufen, als wünschenswert eingestuft wurde,
        # aber mit Orderern und Peers aus früheren Versionen inkompatibel wäre.
        # Stellen Sie vor der Aktivierung der V2.0-Kanalfähigkeiten sicher, dass alle
        # Orderer und Peers auf einem Kanal v2.0.0 oder neuer sind.
        V2_0: true

    # Orderer-Fähigkeiten gelten nur für die Orderer und können sicher
    # mit Peers früherer Versionen verwendet werden.
    # Setzen Sie den Wert der Fähigkeit auf true, um sie vorauszusetzen.
    Orderer: &OrdererCapabilities
        # V1.1 für Orderer ist ein Sammel-Flag für Verhalten, das für alle Orderer,
        # die auf dem v1.1.x-Niveau laufen, als wünschenswert eingestuft wurde,
        # aber mit Orderern aus früheren Versionen inkompatibel wäre.
        # Stellen Sie vor der Aktivierung der V2.0-Orderer-Fähigkeiten sicher, dass alle
        # Orderer auf einem Kanal v2.0.0 oder neuer sind.
        V2_0: true

    # Application-Fähigkeiten gelten nur für das Peer-Netzwerk und können sicher
    # mit Orderern früherer Versionen verwendet werden.
    # Setzen Sie den Wert der Fähigkeit auf true, um sie vorauszusetzen.
    Application: &ApplicationCapabilities
        # V2.5 für Application aktiviert die neuen, nicht abwärtskompatiblen
        # Funktionen von Fabric v2.5, nämlich die Möglichkeit, private Daten zu löschen.
        # Stellen Sie vor der Aktivierung der V2.5-Anwendungsfähigkeiten sicher, dass alle
        # Peers auf einem Kanal v2.5.0 oder neuer sind.
        V2_5: true

################################################################################
#
#   ANWENDUNG (APPLICATION)
#
#   Dieser Abschnitt definiert die Werte, die für anwendungsbezogene Parameter
#   in eine Konfigurationstransaktion oder einen Genesis-Block kodiert werden sollen.
#
################################################################################
Application: &ApplicationDefaults
    ACLs: &ACLsDefault
        # Dieser Abschnitt enthält Standardwerte für Richtlinien für verschiedene Ressourcen
        # im System. Diese "Ressourcen" können Funktionen auf System-Chaincodes
        # (z. B. "GetBlockByNumber" auf dem "qscc"-System-Chaincode) oder andere Ressourcen
        # sein (z. B. wer Block-Events empfangen kann). Dieser Abschnitt spezifiziert NICHT die
        # Definition oder API der Ressource, sondern nur die ACL-Richtlinie dafür.
        #
        # Benutzer können diese Standardwerte mit ihrer eigenen Richtlinienzuordnung überschreiben, indem sie die
        # Zuordnung unter ACLs in ihrer Kanaldefinition definieren.

        #---Neue Lifecycle-System-Chaincode (_lifecycle) Funktions-zu-Richtlinien-Zuordnung für die Zugriffskontrolle--#

        # ACL-Richtlinie für die Funktion "_lifecycle/CheckCommitReadiness"
        _lifecycle/CheckCommitReadiness: /Channel/Application/Writers

        # ACL-Richtlinie für die Funktion "_lifecycle/CommitChaincodeDefinition"
        _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

        # ACL-Richtlinie für die Funktion "_lifecycle/QueryChaincodeDefinition"
        _lifecycle/QueryChaincodeDefinition: /Channel/Application/Writers

        # ACL-Richtlinie für die Funktion "_lifecycle/QueryChaincodeDefinitions"
        _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Writers

        #---Lifecycle System Chaincode (lscc) Funktions-zu-Richtlinien-Zuordnung für die Zugriffskontrolle---#

        # ACL-Richtlinie für die Funktion "lscc/getid"
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "lscc/getdepspec"
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "lscc/getccdata"
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "lscc/getchaincodes"
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

        #---Query System Chaincode (qscc) Funktions-zu-Richtlinien-Zuordnung für die Zugriffskontrolle---#

        # ACL-Richtlinie für die Funktion "qscc/GetChainInfo"
        qscc/GetChainInfo: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "qscc/GetBlockByNumber"
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "qscc/GetBlockByHash"
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "qscc/GetTransactionByID"
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "qscc/GetBlockByTxID"
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) Funktions-zu-Richtlinien-Zuordnung für die Zugriffskontrolle---#

        # ACL-Richtlinie für die Funktion "cscc/GetConfigBlock"
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL-Richtlinie für die Funktion "cscc/GetChannelConfig"
        cscc/GetChannelConfig: /Channel/Application/Readers

        #---Verschiedene Peer-Funktions-zu-Richtlinien-Zuordnungen für die Zugriffskontrolle---#

        # ACL-Richtlinie für das Aufrufen von Chaincodes auf einem Peer
        peer/Propose: /Channel/Application/Writers

        # ACL-Richtlinie für Chaincode-zu-Chaincode-Aufrufe
        peer/ChaincodeToChaincode: /Channel/Application/Writers

        #---Ereignisressource-zu-Richtlinien-Zuordnung für die Zugriffskontrolle###---#

        # ACL-Richtlinie für das Senden von Block-Events
        event/Block: /Channel/Application/Readers

        # ACL-Richtlinie für das Senden von gefilterten Block-Events
        event/FilteredBlock: /Channel/Application/Readers

    # Organizations listet die Organisationen auf, die auf der Anwendungsseite des
    # Netzwerks teilnehmen.
    Organizations:

    # Policies definiert die Richtlinien auf dieser Ebene des Konfigurationsbaums.
    # Für Anwendungsrichtlinien lautet ihr kanonischer Pfad
    #   /Channel/Application/<PolicyName>
    Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities beschreibt die Fähigkeiten auf Anwendungsebene, siehe den
    # dedizierten Capabilities-Abschnitt an anderer Stelle in dieser Datei für eine vollständige
    # Beschreibung.
    Capabilities:
        <<: *ApplicationCapabilities

################################################################################
#
#   ORDERER
#
#   Dieser Abschnitt definiert die Werte, die für Orderer-bezogene Parameter
#   in eine Konfigurationstransaktion oder einen Genesis-Block kodiert werden sollen.
#
################################################################################
Orderer: &OrdererDefaults

    # Orderer-Typ: Die zu startende Orderer-Implementierung.
    # Verfügbare Typen sind "solo", "kafka" und "etcdraft".
    OrdererType: solo

    # Addresses war früher die Liste der Orderer-Adressen, mit denen sich Clients und Peers
    # verbinden konnten. Dies erlaubt es Clients jedoch nicht, Orderer-Adressen
    # und Orderer-Organisationen zuzuordnen, was für Dinge wie die
    # TLS-Validierung nützlich sein kann. Der bevorzugte Weg, Orderer-Adressen anzugeben, ist jetzt,
    # das OrdererEndpoints-Element in Ihrer Organisationsdefinition einzufügen.
    Addresses:
    # - 127.0.0.1:7050

    # Batch-Timeout: Die Zeitspanne, die gewartet wird, bevor ein Batch erstellt wird.
    BatchTimeout: 2s

    # Batch-Größe: Steuert die Anzahl der Nachrichten, die in einem Block gebündelt werden.
    # Der Orderer betrachtet Nachrichten undurchsichtig, aber typischerweise können Nachrichten
    # als Fabric-Transaktionen angesehen werden. Der 'Batch' ist die Gruppe
    # von Nachrichten im 'data'-Feld des Blocks. Blöcke sind einige KB
    # größer als die Batch-Größe, wenn Signaturen, Hashes und andere Metadaten
    # angewendet werden.
    BatchSize:

        # Maximale Nachrichtenanzahl: Die maximale Anzahl von Nachrichten, die in einem
        # Batch erlaubt sind. Kein Block wird mehr als diese Anzahl von Nachrichten enthalten.
        MaxMessageCount: 500

        # Absolute maximale Bytes: Die absolute maximale Anzahl von Bytes, die für
        # die serialisierten Nachrichten in einem Batch erlaubt ist. Die maximale Blockgröße ist dieser Wert
        # plus die Größe der zugehörigen Metadaten (normalerweise einige KB, abhängig
        # von der Größe der Signaturidentitäten). Jede Transaktion, die größer als
        # dieser Wert ist, wird vom Ordering-Dienst abgelehnt.
        # Es wird empfohlen, 49 MB nicht zu überschreiten, angesichts der standardmäßigen grpc-Nachrichtengröße von 100 MB,
        # die auf Orderer- und Peer-Knoten konfiguriert ist (und um eine Nachrichtenerweiterung während der Kommunikation zu ermöglichen).
        AbsoluteMaxBytes: 10 MB

        # Bevorzugte maximale Bytes: Die bevorzugte maximale Anzahl von Bytes, die
        # für die serialisierten Nachrichten in einem Batch erlaubt ist. Grob gesagt kann dieses Feld als
        # die nach bestem Bemühen maximale Größe eines Batches betrachtet werden. Ein Batch füllt sich mit Nachrichten,
        # bis diese Größe erreicht ist (oder die maximale Nachrichtenanzahl oder das Batch-Timeout
        # überschritten wird). Wenn das Hinzufügen einer neuen Nachricht zum Batch dazu führen würde, dass der Batch
        # die bevorzugten maximalen Bytes überschreitet, wird der aktuelle Batch geschlossen und
        # in einen Block geschrieben, und ein neuer Batch, der die neue Nachricht enthält, wird erstellt. Wenn eine
        # Nachricht empfangen wird, die größer als die bevorzugten maximalen Bytes ist, wird ihr Batch
        # nur diese eine Nachricht enthalten. Da Nachrichten größer als
        # die bevorzugten maximalen Bytes sein können (bis zu AbsoluteMaxBytes), können einige Batches
        # die bevorzugten maximalen Bytes überschreiten, enthalten aber immer genau eine Transaktion.
        PreferredMaxBytes: 2 MB

    # MaxChannels ist die maximale Anzahl von Kanälen, die im Ordering-Netzwerk
    # erlaubt sind. Wenn auf 0 gesetzt, bedeutet dies keine maximale Anzahl von Kanälen.
    MaxChannels: 0

    Kafka:
        # Brokers: Eine Liste von Kafka-Brokern, mit denen sich der Orderer verbindet. Bearbeiten
        # Sie diese Liste, um die Broker des Ordering-Dienstes zu identifizieren.
        # HINWEIS: Verwenden Sie die IP:Port-Notation.
        Brokers:
            - kafka0:9092
            - kafka1:9092
            - kafka2:9092

    # EtcdRaft definiert die Konfiguration, die festgelegt werden muss, wenn der
    # Orderer-Typ "etcdraft" gewählt wird.
    EtcdRaft:
        # Die Gruppe der Raft-Replikate für dieses Netzwerk. Für die etcd/raft-basierte
        # Implementierung erwarten wir, dass jedes Replikat auch ein OSN ist. Daher sollte
        # eine Teilmenge der hier aufgezählten Host:Port-Elemente
        # unter dem Orderer.Addresses-Schlüssel oben repliziert werden.
        Consenters:
            - Host: raft0.example.com
              Port: 7050
              ClientTLSCert: path/to/ClientTLSCert0
              ServerTLSCert: path/to/ServerTLSCert0
            - Host: raft1.example.com
              Port: 7050
              ClientTLSCert: path/to/ClientTLSCert1
              ServerTLSCert: path/to/ServerTLSCert1
            - Host: raft2.example.com
              Port: 7050
              ClientTLSCert: path/to/ClientTLSCert2
              ServerTLSCert: path/to/ServerTLSCert2

        # Optionen, die für alle etcd/raft-Knoten angegeben werden müssen. Die Werte hier
        # sind die Standardwerte für alle neuen Kanäle und können pro Kanal
        # über Konfigurationsupdates geändert werden.
        Options:
            # TickInterval ist das Zeitintervall zwischen zwei Node.Tick-Aufrufen.
            TickInterval: 500ms

            # ElectionTick ist die Anzahl der Node.Tick-Aufrufe, die
            # zwischen Wahlen vergehen müssen. Das heißt, wenn ein Follower keine
            # Nachricht vom Leader der aktuellen Amtszeit erhält, bevor ElectionTick
            # abgelaufen ist, wird er zum Kandidaten und startet eine Wahl.
            # ElectionTick muss größer als HeartbeatTick sein.
            ElectionTick: 10

            # HeartbeatTick ist die Anzahl der Node.Tick-Aufrufe, die
            # zwischen Heartbeats vergehen müssen. Das heißt, ein Leader sendet Heartbeat-
            # Nachrichten, um seine Führung alle HeartbeatTick-Ticks aufrechtzuerhalten.
            HeartbeatTick: 1

            # MaxInflightBlocks begrenzt die maximale Anzahl von in-flight-Append-Nachrichten
            # während der optimistischen Replikationsphase.
            MaxInflightBlocks: 5

            # SnapshotIntervalSize definiert die Anzahl der Bytes, nach denen ein Snapshot erstellt wird.
            SnapshotIntervalSize: 16 MB

    # Organizations listet die Organisationen auf, die auf der Orderer-Seite des
    # Netzwerks teilnehmen.
    Organizations:

    # Policies definiert die Richtlinien auf dieser Ebene des Konfigurationsbaums.
    # Für Orderer-Richtlinien lautet ihr kanonischer Pfad
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
        # BlockValidation gibt an, welche Signaturen vom Orderer im Block
        # enthalten sein müssen, damit der Peer ihn validieren kann.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

    # Capabilities beschreibt die Fähigkeiten auf Orderer-Ebene, siehe den
    # dedizierten Capabilities-Abschnitt an anderer Stelle in dieser Datei für eine vollständige
    # Beschreibung.
    Capabilities:
        <<: *OrdererCapabilities

################################################################################
#
#   KANAL (CHANNEL)
#
#   Dieser Abschnitt definiert die Werte, die für kanalbezogene Parameter
#   in eine Konfigurationstransaktion oder einen Genesis-Block kodiert werden sollen.
#
################################################################################
Channel: &ChannelDefaults
    # Policies definiert die Richtlinien auf dieser Ebene des Konfigurationsbaums.
    # Für Kanalrichtlinien lautet ihr kanonischer Pfad
    #   /Channel/<PolicyName>
    Policies:
        # Wer die 'Deliver'-API aufrufen darf
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Wer die 'Broadcast'-API aufrufen darf
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # Wer standardmäßig Elemente auf dieser Konfigurationsebene ändern darf
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"


    # Capabilities beschreibt die Fähigkeiten auf Kanalebene, siehe den
    # dedizierten Capabilities-Abschnitt an anderer Stelle in dieser Datei für eine vollständige
    # Beschreibung.
    Capabilities:
        <<: *ChannelCapabilities

################################################################################
#
#   PROFILE
#
#   Verschiedene Konfigurationsprofile können hier kodiert werden, um als
#   Parameter für das configtxgen-Tool angegeben zu werden. Die Profile, die Konsortien
#   spezifizieren, sind für die Erstellung des Orderer-Genesis-Blocks zu verwenden. Mit den richtigen
#   Konsortiumsmitgliedern, die im Orderer-Genesis-Block definiert sind, können Kanalerstellungsanfragen
#   nur mit den Namen der Organisationsmitglieder und einem Konsortiumsnamen generiert werden.
#
################################################################################
Profiles:

    # SampleSingleMSPSolo definiert eine Konfiguration, die den Solo-Orderer verwendet
    # und eine einzelne MSP-Definition enthält (die MSP-Beispielkonfiguration).
    # Das Konsortium SampleConsortium hat nur ein einziges Mitglied, SampleOrg.
    SampleSingleMSPSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *SampleOrg
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *SampleOrg

    # SampleSingleMSPKafka definiert eine Konfiguration, die sich von
    # SampleSingleMSPSolo nur dadurch unterscheidet, dass sie den Kafka-basierten Orderer verwendet.
    SampleSingleMSPKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Organizations:
                - *SampleOrg
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *SampleOrg

    # SampleInsecureSolo definiert eine Konfiguration, die den Solo-Orderer verwendet,
    # keine MSP-Definitionen enthält und alle Transaktionen und Kanalerstellungsanfragen
    # für das Konsortium SampleConsortium erlaubt.
    SampleInsecureSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
        Consortiums:
            SampleConsortium:
                Organizations:

    # SampleInsecureKafka definiert eine Konfiguration, die sich von
    # SampleInsecureSolo nur dadurch unterscheidet, dass sie den Kafka-basierten Orderer verwendet.
    SampleInsecureKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
        Consortiums:
            SampleConsortium:
                Organizations:

    # SampleDevModeSolo definiert eine Konfiguration, die den Solo-Orderer verwendet,
    # das Beispiel-MSP sowohl als Orderer- als auch als Konsortiumsmitglied enthält und
    # nur eine einfache Mitgliedschaft für Administratorrechte erfordert. Es definiert auch
    # eine Anwendung auf dem Ordering-Systemkanal, was normalerweise
    # vermieden werden sollte.
    SampleDevModeSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Consortiums:
            SampleConsortium:
                Organizations:
                    - <<: *SampleOrg
                      Policies:
                          <<: *SampleOrgPolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('SampleOrg.member')"

    # SampleDevModeKafka definiert eine Konfiguration, die sich von
    # SampleDevModeSolo nur dadurch unterscheidet, dass sie den Kafka-basierten Orderer verwendet.
    SampleDevModeKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Consortiums:
            SampleConsortium:
                Organizations:
                    - <<: *SampleOrg
                      Policies:
                          <<: *SampleOrgPolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('SampleOrg.member')"

    # SampleSingleMSPChannel definiert einen Kanal mit nur der Beispielorganisation als
    # Mitglied. Es ist für die Verwendung in Verbindung mit den Orderer-Profilen SampleSingleMSPSolo
    # und SampleSingleMSPKafka konzipiert. Beachten Sie, dass für Kanalerstellungsprofile
    # nur der 'Application'-Abschnitt und der Konsortiumsname
    # berücksichtigt werden.
    SampleSingleMSPChannel:
        <<: *ChannelDefaults
        Consortium: SampleConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg

    # SampleDevModeEtcdRaft definiert eine Konfiguration, die sich von
    # SampleDevModeSolo nur dadurch unterscheidet, dass sie den etcd/raft-basierten Orderer verwendet.
    SampleDevModeEtcdRaft:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Consortiums:
            SampleConsortium:
                Organizations:
                    - <<: *SampleOrg
                      Policies:
                          <<: *SampleOrgPolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('SampleOrg.member')"

    # SampleAppChannelInsecureSolo definiert eine Anwendungskanalkonfiguration,
    # die den Solo-Orderer verwendet und keine MSP-Definitionen enthält.
    SampleAppChannelInsecureSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
        Application:
            <<: *ApplicationDefaults

    # SampleAppChannelEtcdRaft definiert eine Anwendungskanalkonfiguration,
    # die den etcd/raft-basierten Orderer verwendet.
    SampleAppChannelEtcdRaft:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
